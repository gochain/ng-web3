!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("rxjs"),require("rxjs/internal-compatibility"),require("rxjs/operators"),require("web3")):"function"==typeof define&&define.amd?define("gochain-ng-web3",["exports","@angular/core","rxjs","rxjs/internal-compatibility","rxjs/operators","web3"],t):t((e=e||self)["gochain-ng-web3"]={},e.ng.core,e.rxjs,e.rxjs["internal-compatibility"],e.rxjs.operators,e.Web3)}(this,(function(e,t,r,n,i,o){"use strict";o=o&&o.hasOwnProperty("default")?o.default:o;var a=function(){function e(){this.metamaskInstalled$=new r.BehaviorSubject(null),this.metamaskConfigured$=new r.BehaviorSubject(null),this.metamaskActivated$=new r.BehaviorSubject(null),this.ready$=new r.BehaviorSubject(null)}return Object.defineProperty(e.prototype,"metamaskInstalled",{set:function(e){this._metamaskInstalled=e,this.metamaskInstalled$.next(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"metamaskConfigured",{set:function(e){this._metamaskConfigured=e,this.metamaskConfigured$.next(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"metamaskActivated",{set:function(e){this._metamaskActivated=e,this.metamaskActivated$.next(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"web3",{get:function(){return this._metamaskConfigured&&this._metamaskInstalled?this.pluginWeb3:this.gochainWeb3},enumerable:!0,configurable:!0}),e.prototype.initialize=function(e){return this._config=e,e.rpcUrl?(this.gochainWeb3=new o(new o.providers.HttpProvider(e.rpcUrl),null,{transactionConfirmationBlocks:1}),n.fromPromise(this.gochainWeb3.eth.net.getId()).pipe(i.catchError((function(e){return r.throwError("Can't get GoChain network id")})),i.map((function(e){return!!e})))):r.throwError("rpc url hasn't been provided")},e.prototype.initializePlugin=function(){var e=this;return this.gochainWeb3?this._gochainNetId?(this.pluginWeb3=new o(o.givenProvider,null,{transactionConfirmationBlocks:1}),this.pluginWeb3.currentProvider?n.fromPromise(this.pluginWeb3.eth.net.getId()).pipe(i.catchError((function(t){return e.metamaskInstalled=!0,e.metamaskConfigured=!1,r.throwError("Metamask installed but not configured properly - can't get network id from Metamask")})),i.map((function(t){return e._gochainNetId!==t?(e.metamaskInstalled=!0,e.metamaskConfigured=!1,r.throwError("Metamask installed but misconfigured - network ID mismatch (must use GoChain "+e._gochainNetId+" - e.g. by pointing to "+e._config.rpcUrl+")")):(e.metamaskInstalled=!0,e.metamaskConfigured=!0,e.getPluginAccountAddress(),!0)}))):(this.metamaskInstalled=!1,this.metamaskConfigured=!1,r.throwError("metamask is not installed"))):r.throwError("gochain network id is not provided"):r.throwError("initialize first")},e.prototype.activatePlugin=function(){var e=this;return n.fromPromise(window.ethereum.enable()).pipe(i.catchError((function(t){return e.metamaskActivated=!1,r.throwError("Access haven't been granted")})),i.tap((function(){e.metamaskActivated=!0})))},e.prototype.getPluginAccountAddress=function(){var e=this;n.fromPromise(this.pluginWeb3.eth.getAccounts()).subscribe((function(t){e.accountAddress=t[0]}))},e.prototype.createAccount=function(){return this.web3?this.web3.eth.accounts.create():null},e.prototype.closeAccount=function(){this.account=null,this.accountAddress=null,this.accountBalance=null},e.prototype.sendSignedTx=function(e){return n.fromPromise(this.gochainWeb3.eth.sendSignedTransaction(e.rawTransaction))},e.prototype.isAddress=function(e){return this.gochainWeb3.utils.isAddress(e)},e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e}();e.GochainNgWeb3Service=a,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=gochain-ng-web3.umd.min.js.map