{"version":3,"sources":["ng://gochain-ng-web3/lib/gochain-ng-web3.service.ts"],"names":["GochainNgWeb3Service","this","metamaskInstalled$","BehaviorSubject","metamaskConfigured$","metamaskActivated$","ready$","Object","defineProperty","prototype","value","_metamaskInstalled","next","_metamaskConfigured","_metamaskActivated","pluginWeb3","gochainWeb3","initialize","config","_config","rpcUrl","Web3","providers","HttpProvider","transactionConfirmationBlocks","fromPromise","eth","net","getId","pipe","catchError","e","throwError","map","v","initializePlugin","_this","_gochainNetId","givenProvider","currentProvider","metamaskInstalled","metamaskConfigured","metamaskNetID","getPluginAccountAddress","activatePlugin","ethereum","enable","metamaskActivated","tap","getAccounts","subscribe","accounts","accountAddress","createAccount","web3","create","closeAccount","account","accountBalance","sendSignedTx","signed","sendSignedTransaction","rawTransaction","isAddress","address","utils","Injectable","args","providedIn"],"mappings":"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","sourcesContent":["/*CORE*/\nimport {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable, throwError} from 'rxjs';\nimport {fromPromise} from 'rxjs/internal-compatibility';\nimport {catchError, map, tap} from 'rxjs/operators';\n/*WEB3*/\nimport Web3 from 'web3';\nimport {Account} from 'web3-eth-accounts';\nimport {SignedTransaction, TransactionReceipt} from 'web3-core';\n\nclass InitConfig {\n  rpcUrl: string;\n}\n\ninterface IGochainWeb3Service {\n  initialize(config: InitConfig);\n\n  initializePlugin();\n\n  activatePlugin();\n\n  getPluginAccountAddress();\n\n  createAccount();\n\n  /*openAccount(privateKey: string);*/\n\n  closeAccount();\n\n  /*getBalance();*/\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GochainNgWeb3Service implements IGochainWeb3Service {\n  private _metamaskInstalled: boolean;\n  private _metamaskConfigured: boolean;\n  private _metamaskActivated: boolean;\n  private _config: InitConfig;\n  private _gochainNetId: number;\n\n  set metamaskInstalled(value: boolean) {\n    this._metamaskInstalled = value;\n    this.metamaskInstalled$.next(value);\n  }\n\n  set metamaskConfigured(value: boolean) {\n    this._metamaskConfigured = value;\n    this.metamaskConfigured$.next(value);\n  }\n\n  set metamaskActivated(value: boolean) {\n    this._metamaskActivated = value;\n    this.metamaskActivated$.next(value);\n  }\n\n  metamaskInstalled$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n  metamaskConfigured$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n  metamaskActivated$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n  ready$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n  accountBalance: string;\n  gochainWeb3: Web3;\n  pluginWeb3: Web3;\n  accountAddress: string;\n  account: Account;\n\n  get web3(): Web3 {\n    if (this._metamaskConfigured && this._metamaskInstalled) {\n      return this.pluginWeb3;\n    }\n    return this.gochainWeb3;\n  }\n\n  constructor() {\n  }\n\n  initialize(config: InitConfig): Observable<boolean> {\n    this._config = config;\n    if (!config.rpcUrl) {\n      return throwError('rpc url hasn\\'t been provided');\n    }\n    this.gochainWeb3 = new Web3(new Web3.providers.HttpProvider(config.rpcUrl), null, {transactionConfirmationBlocks: 1});\n\n    return fromPromise(this.gochainWeb3.eth.net.getId()).pipe(\n      catchError((e: Error) => {\n        return throwError('Can\\'t get GoChain network id');\n      }),\n      map(v => !!v),\n    );\n  }\n\n  initializePlugin(): Observable<any> {\n    if (!this.gochainWeb3) {\n      return throwError('initialize first');\n    }\n    if (!this._gochainNetId) {\n      return throwError('gochain network id is not provided');\n    }\n\n    this.pluginWeb3 = new Web3(Web3.givenProvider, null, {transactionConfirmationBlocks: 1});\n\n    if (!this.pluginWeb3.currentProvider) {\n      this.metamaskInstalled = false;\n      this.metamaskConfigured = false;\n      return throwError('metamask is not installed');\n    }\n\n    return fromPromise(this.pluginWeb3.eth.net.getId()).pipe(\n      catchError((e: Error) => {\n        this.metamaskInstalled = true;\n        this.metamaskConfigured = false;\n        return throwError('Metamask installed but not configured properly - can\\'t get network id from Metamask');\n      }),\n      map((metamaskNetID: number) => {\n        if (this._gochainNetId !== metamaskNetID) {\n          this.metamaskInstalled = true;\n          this.metamaskConfigured = false;\n          return throwError(`Metamask installed but misconfigured - network ID mismatch (must use GoChain ${this._gochainNetId} - e.g. by pointing to ${this._config.rpcUrl})`);\n        }\n        this.metamaskInstalled = true;\n        this.metamaskConfigured = true;\n        this.getPluginAccountAddress();\n        return true;\n      }),\n    );\n  }\n\n  activatePlugin(): Observable<any> {\n    return fromPromise((window as any).ethereum.enable()).pipe(\n      catchError((e) => {\n        this.metamaskActivated = false;\n        return throwError('Access haven\\'t been granted');\n      }),\n      tap(() => {\n        this.metamaskActivated = true;\n      }),\n    );\n  }\n\n  getPluginAccountAddress(): void {\n    fromPromise(this.pluginWeb3.eth.getAccounts()).subscribe((accounts: string[]) => {\n      this.accountAddress = accounts[0];\n    });\n  }\n\n  createAccount() {\n    return !!this.web3 ? this.web3.eth.accounts.create() : null;\n  }\n\n  /*protected _openAccount(privateKey: string) {\n    if (privateKey.length === 64 && privateKey.indexOf('0x') !== 0) {\n      privateKey = '0x' + privateKey;\n    }\n    if (privateKey.length !== 66) {\n      throw Error('Given private key is not valid');\n    }\n    try {\n      this.account = this.gochainWeb3.eth.accounts.privateKeyToAccount(privateKey);\n    } catch (e) {\n      throw e;\n    }\n    return this.account;\n  }*/\n\n  closeAccount() {\n    this.account = null;\n    this.accountAddress = null;\n    this.accountBalance = null;\n  }\n\n  /*getBalance() {\n    return fromPromise(this.gochainWeb3.eth.getBalance(this.account.address)).pipe(\n      map((balance: string) => {\n        this.accountBalance = this.gochainWeb3.utils.fromWei(balance, 'ether').toString();\n        return this.accountBalance;\n      }),\n    );\n  }*/\n\n  sendSignedTx(signed: SignedTransaction): Observable<TransactionReceipt> {\n    return fromPromise(this.gochainWeb3.eth.sendSignedTransaction(signed.rawTransaction));\n  }\n\n  isAddress(address: string) {\n    return this.gochainWeb3.utils.isAddress(address);\n  }\n}\n"]}